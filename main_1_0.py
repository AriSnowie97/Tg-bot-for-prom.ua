import os
import logging
import tempfile
import uuid
import openpyxl
from openpyxl import Workbook
from telegram import Update, InputFile
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters

# üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# üü¢ –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å —Å—Ç—Ä–æ–∫—É —Å —Å—Å—ã–ª–∫–∞–º–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é) –∏–ª–∏ Excel-—Ñ–∞–π–ª (.xlsx).\n"
        "–Ø –≤–µ—Ä–Ω—É —Ç–µ–±–µ –ø–µ—Ä–≤—ã–µ 10 —Å—Å—ã–ª–æ–∫ –ø–æ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ."
    )

# üî§ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message.text
    image_urls = [url.strip() for url in message.split(",") if url.strip().startswith("http")]
    first_10 = image_urls[:10]

    if not first_10:
        await update.message.reply_text("‚ùóÔ∏è–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª–∏–¥–Ω—ã—Ö —Å—Å—ã–ª–æ–∫.")
        return

    response = "üîü –ü–µ—Ä–≤—ã–µ 10 —Å—Å—ã–ª–æ–∫:\n\n" + "\n".join(first_10)
    await update.message.reply_text(response)

# üìÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ Excel-—Ñ–∞–π–ª–æ–≤
async def handle_excel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    document = update.message.document

    if not document.file_name.endswith(".xlsx"):
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å Excel-—Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .xlsx")
        return

    try:
        temp_filename = os.path.join(tempfile.gettempdir(), f"{uuid.uuid4()}.xlsx")
        file = await document.get_file()
        await file.download_to_drive(temp_filename)

        wb = openpyxl.load_workbook(temp_filename)
        sheet = wb.active

        messages = []
        output_data = []

        for idx, row in enumerate(sheet.iter_rows(min_row=1, max_col=1), start=1):
            cell = row[0]
            if cell.value:
                parts = str(cell.value).split(",")
                links = [url.strip() for url in parts if url.strip().startswith("http")]
                top_links = links[:10]

                if top_links:
                    text = f"üßæ –°—Ç—Ä–æ–∫–∞ {idx}: {len(top_links)} —Å—Å—ã–ª–æ–∫\n" + "\n".join(top_links)
                    messages.append(text)
                    output_data.append([idx, len(top_links), "\n".join(top_links)])
                else:
                    messages.append(f"üßæ –°—Ç—Ä–æ–∫–∞ {idx}: –Ω–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö —Å—Å—ã–ª–æ–∫")
                    output_data.append([idx, 0, ""])

        # –°–æ–æ–±—â–µ–Ω–∏—è
        if messages:
            for chunk in split_messages(messages):
                await update.message.reply_text(chunk)
        else:
            await update.message.reply_text("‚ö†Ô∏è –í —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏.")

        # –°–æ–∑–¥–∞–Ω–∏–µ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ Excel
        if output_data:
            out_wb = Workbook()
            out_ws = out_wb.active
            out_ws.title = "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã"
            out_ws.append(["–°—Ç—Ä–æ–∫–∞", "–ö–æ–ª-–≤–æ —Å—Å—ã–ª–æ–∫", "–°—Å—ã–ª–∫–∏ (–¥–æ 10)"])
            for row in output_data:
                out_ws.append(row)

            result_path = os.path.join(tempfile.gettempdir(), f"result_{uuid.uuid4()}.xlsx")
            out_wb.save(result_path)

            with open(result_path, "rb") as f:
                await update.message.reply_document(
                    document=InputFile(f, filename="processed_links.xlsx"),
                    caption="üìÑ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ñ–∞–π–ª —Å —Å—Å—ã–ª–∫–∞–º–∏"
                )
            os.remove(result_path)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ Excel: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞.")
    finally:
        if os.path.exists(temp_filename):
            os.remove(temp_filename)

# üìú –†–∞–∑–±–∏–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
def split_messages(messages, limit=4000):
    chunks = []
    current = ""

    for msg in messages:
        if len(current) + len(msg) + 2 > limit:
            chunks.append(current)
            current = msg
        else:
            if current:
                current += "\n\n" + msg
            else:
                current = msg

    if current:
        chunks.append(current)

    return chunks

# ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    TOKEN = "7575947696:AAEAuezyu_AEnpG2IMCPXFk6i_lW9zAos1w"

    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.add_handler(MessageHandler(
        filters.Document.MimeType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"),
        handle_excel
))


    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()

if __name__ == "__main__":
    main()
